generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String     @db.VarChar(80)
  description String     @db.VarChar(240)
  ingredients String[]
  moveActive  Boolean    @default(false)
  price       Float
  userId      String?
  User        User?      @relation(fields: [userId], references: [id])
  categories  Category[]

  ProductSale ProductSale[]
}

model Category {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  name      String
  products  Product[]
  userId    String?
  User      User?     @relation(fields: [userId], references: [id])
}

model User {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  name              String
  email             String
  password          String
  products          Product[]
  categories        Category[]
  userBoughtProduct ProductSale[] @relation("UserBoughtProduct")
  userSoldProduct   ProductSale[] @relation("UserSoldProduct")
  messages          Chat[]
  chats             Chat[]        @relation("RecieverOfChat")

}

model Chat {
  id         String   @id @default(uuid())
  receiverId String
  receiver   User     @relation("RecieverOfChat", fields: [receiverId], references: [id])
  sender     User     @relation(fields: [senderId], references: [id])
  senderId   String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ProductSale {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userThatSold      User     @relation("UserSoldProduct", fields: [userSoldId], references: [id])
  userThatPurchased User     @relation("UserBoughtProduct", fields: [userPurchasedId], references: [id])
  userSoldId        String
  userPurchasedId   String
  price             Float
  product           Product  @relation(fields: [productId], references: [id])
  productId String
}

enum UserType {
  ADMIN
  STAFF
}
